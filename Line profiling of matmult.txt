From the line_profiler we can see that "result[i][j] += X[i][k] * Y[k][j]" 

Timer unit: 1e-07 s

Total time: 0.785749 s
File: <ipython-input-3-3c7ef7005c80>
Function: generate_matrix at line 4

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     4                                           def generate_matrix(N):
     5                                               # NxN matrix
     6         1         36.0     36.0      0.0      X = []
     7       251       3841.0     15.3      0.0      for i in range(N):
     8       250    3895434.0  15581.7     49.6          X.append([random.randint(0,100) for r in range(N)])
     9                                               
    10                                               # Nx(N+1) matrix
    11         1          6.0      6.0      0.0      Y = []
    12       251       4527.0     18.0      0.1      for i in range(N):
    13       250    3953641.0  15814.6     50.3          Y.append([random.randint(0,100) for r in range(N+1)])
    14         1          7.0      7.0      0.0      return (X, Y)

Timer unit: 1e-07 s

Total time: 0.000432 s
File: <ipython-input-3-3c7ef7005c80>
Function: empty_results at line 16

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                           def empty_results():
    17                                               # result is Nx(N+1)
    18         1         19.0     19.0      0.4      result = []
    19       251        686.0      2.7     15.9      for i in range(N):
    20       250       3611.0     14.4     83.6          result.append([0] * (N+1))
    21         1          4.0      4.0      0.1      return result

Timer unit: 1e-07 s

Total time: 20.5899 s
File: <ipython-input-3-3c7ef7005c80>
Function: insert_results at line 23

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    23                                           def insert_results():
    24                                               
    25                                               #insert_results is by far the slowest part of the script,
    26                                               #this is where I would focus the optimization if possible
    27                                               
    28                                               # iterate through rows of X
    29       251       1527.0      6.1      0.0      for i in range(len(X)):
    30                                                   # iterate through columns of Y
    31     63000     290749.0      4.6      0.1          for j in range(len(Y[0])):
    32                                                       # iterate through rows of Y
    33  15750250   61798708.0      3.9     30.0              for k in range(len(Y)):
    34  15687500  143808065.0      9.2     69.8                  result[i][j] += X[i][k] * Y[k][j]

Timer unit: 1e-07 s

Total time: 0.0998437 s
File: <ipython-input-3-3c7ef7005c80>
Function: show_results at line 36

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    36                                           def show_results():
    37       251       3279.0     13.1      0.3      for r in result:
    38       250     995158.0   3980.6     99.7          print(r)

