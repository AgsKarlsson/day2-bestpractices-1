Looks like most time is spent in fast_phi, in which factorize is what takes time.
In factorize, the while, if, and for lines are what take time. 
I'm not sure how you would go about improving the performance here, 
maybe try to avoid looping over it so many times?


%lprun -f gen_primes primes = gen_primes(1000)

Timer unit: 1e-07 s

Total time: 0.0079059 s
File: <ipython-input-3-805f47c7f768>
Function: gen_primes at line 5

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     5                                           def gen_primes(n):
     6         1         40.0     40.0      0.1      l = range(2,n)
     7         1          5.0      5.0      0.0      primes = []
     8       999       3863.0      3.9      4.9      for j in range(0,len(l)):
     9       998       4687.0      4.7      5.9          p = True
    10      2968      13634.0      4.6     17.2          for d in primes:
    11      2967      26204.0      8.8     33.1              if(d > sqrt(l[j])):
    12       167        525.0      3.1      0.7                  break
    13      2800      17845.0      6.4     22.6              if(l[j] % d == 0):
    14       830       2742.0      3.3      3.5                  p = False
    15       830       4166.0      5.0      5.3                  break;
    16       998       3788.0      3.8      4.8          if(p):
    17       168       1554.0      9.2      2.0              primes.append(l[j])
    18                                           
    19         1          6.0      6.0      0.0      return primes


%lprun -f phi_range fraq = phi_range(10000)

Timer unit: 1e-07 s

Total time: 0.228686 s
File: <ipython-input-6-d5ecb22358a9>
Function: phi_range at line 58

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    58                                           def phi_range(m):
    59         1         18.0     18.0      0.0      fraq = 0
    60     10000      59618.0      6.0      2.6      for i in range(2,m+1):
    61      9999    2227226.0    222.7     97.4          fraq += fast_phi(i,primes)
    62         1          3.0      3.0      0.0      return fraq


%lprun -f fast_phi fraq = phi_range(10000)

Timer unit: 1e-07 s

Total time: 0.149848 s
File: <ipython-input-6-d5ecb22358a9>
Function: fast_phi at line 49

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    49                                           def fast_phi(n,primes):
    50      9999    1013818.0    101.4     67.7      factors = factorize(n,primes)
    51      9999      44557.0      4.5      3.0      phi = factors[0]-1
    52     31985     148250.0      4.6      9.9      for i in range(1,len(factors)):
    53     21986     119393.0      5.4      8.0          if(factors[i] == factors[i-1]):
    54      7685      56347.0      7.3      3.8              phi *= (factors[i]-1)*(factors[i])/(factors[i]-1)
    55                                                   else:
    56     14301      78559.0      5.5      5.2              phi *= (factors[i]-1)
    57      9999      37555.0      3.8      2.5      return phi


%lprun -f factorize fraq = phi_range(10000)

Timer unit: 1e-07 s

Total time: 0.17715 s
File: <ipython-input-6-d5ecb22358a9>
Function: factorize at line 21

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    21                                           def factorize(n,primes):
    22      9999      37461.0      3.7      2.1      factors = []
    23      9999      31884.0      3.2      1.8      init_n = n
    24     96347     313439.0      3.3     17.7      for p in primes:
    25    118736     566965.0      4.8     32.0          while(n%p == 0):
    26     22389      87803.0      3.9      5.0              n = n/p
    27     22389      95681.0      4.3      5.4              factors.append(p)
    28     96347     495513.0      5.1     28.0          if(p > sqrt(n)):
    29      9999      32843.0      3.3      1.9              break
    30      9999      39417.0      3.9      2.2      if(n > 1):
    31      9596      39700.0      4.1      2.2          factors.append(n)
    32      9999      30799.0      3.1      1.7      return factors